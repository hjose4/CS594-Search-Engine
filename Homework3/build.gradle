apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
    
    compile 'org.jsoup:jsoup:1.7.2'
    
    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    
    
    compile 'org.apache.lucene:lucene-core:4.8.0'    
    compile 'org.apache.lucene:lucene-analyzers-common:4.8.0'
    
    compile 'org.apache.lucene:lucene-core:3.6.0'    
    compile 'org.apache.lucene:lucene-analyzers-common:3.6.0'
    
    compile 'org.apache.lucene:lucene-core:5.5.0'    
    compile 'org.apache.lucene:lucene-analyzers-common:5.5.0'
    
    compile 'org.apache.hadoop:hadoop-common:2.5.2'
    compile 'org.apache.hadoop:hadoop-mapreduce-client-core:2.5.2'    
    compile 'org.apache.hadoop:hadoop-hdfs:2.5.2'
    
    
    compile 'com.google.code.gson:gson:2.5'
    
    
    

}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}


task read(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'Util.InputReader'
}


task stop(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'Util.StopWord'
}


task index(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'org.apache.lucene.demo.IndexFiles'
}

task ind(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'index.WordFrequenceInDocument'
}


task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'core.index'
}

task view(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'Util.readJSON'
}


task create(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'index.IndexManager'
}


task rank(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'rank.Ranking'
}


task parse(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'test.Parser'
}

